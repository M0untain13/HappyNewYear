#include <windows.h>
#include <string>
#include <chrono>
#include <iomanip>
#include <sstream>

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
HINSTANCE hInst;
const wchar_t szWindowClass[] = L"NewYearCountdown";
const wchar_t szTitle[] = L"–î–æ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞ –æ—Å—Ç–∞–ª–æ—Å—å:";

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –¥–Ω–µ–π –¥–æ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞
int GetDaysUntilNewYear() {
    auto now = std::chrono::system_clock::now();
    time_t now_time = std::chrono::system_clock::to_time_t(now);
    tm* local_time = localtime(&now_time);
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ –ù–æ–≤–æ–≥–æ –ì–æ–¥–∞
    tm new_year = *local_time;
    new_year.tm_year = local_time->tm_year + 1; // –°–ª–µ–¥—É—é—â–∏–π –≥–æ–¥
    new_year.tm_mon = 0;  // –Ø–Ω–≤–∞—Ä—å
    new_year.tm_mday = 1; // 1 —á–∏—Å–ª–æ
    new_year.tm_hour = 0;
    new_year.tm_min = 0;
    new_year.tm_sec = 0;
    
    time_t new_year_time = mktime(&new_year);
    
    // –†–∞–∑–Ω–∏—Ü–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    double diff_seconds = difftime(new_year_time, now_time);
    
    // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –¥–Ω–∏
    int days = static_cast<int>(diff_seconds / (60 * 60 * 24));
    
    return days;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
std::wstring GetCurrentDate() {
    auto now = std::chrono::system_clock::now();
    time_t now_time = std::chrono::system_clock::to_time_t(now);
    tm* local_time = localtime(&now_time);
    
    wchar_t buffer[80];
    wcsftime(buffer, sizeof(buffer), L"%d.%m.%Y %H:%M:%S", local_time);
    
    return std::wstring(buffer);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam) {
    static HWND hDaysLabel, hDateLabel;
    static UINT_PTR timerId;
    
    switch (message) {
    case WM_CREATE:
        // –°–æ–∑–¥–∞–µ–º —Ç–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
        timerId = SetTimer(hWnd, 1, 1000, NULL);
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–Ω–µ–π
        hDaysLabel = CreateWindowW(L"STATIC", L"", 
            WS_CHILD | WS_VISIBLE | SS_CENTER,
            10, 10, 280, 60, hWnd, NULL, hInst, NULL);
        
        // –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        hDateLabel = CreateWindowW(L"STATIC", L"", 
            WS_CHILD | WS_VISIBLE | SS_CENTER,
            10, 80, 280, 20, hWnd, NULL, hInst, NULL);
        
        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à—Ä–∏—Ñ—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
        HFONT hFont;
        hFont = CreateFont(36, 0, 0, 0, FW_BOLD, FALSE, FALSE, FALSE, 
                          DEFAULT_CHARSET, OUT_OUTLINE_PRECIS,
                          CLIP_DEFAULT_PRECIS, CLEARTYPE_QUALITY, 
                          VARIABLE_PITCH, L"Arial");
        SendMessage(hDaysLabel, WM_SETFONT, (WPARAM)hFont, TRUE);
        
        // –®—Ä–∏—Ñ—Ç –¥–ª—è –¥–∞—Ç—ã
        HFONT hSmallFont;
        hSmallFont = CreateFont(14, 0, 0, 0, FW_NORMAL, FALSE, FALSE, FALSE, 
                               DEFAULT_CHARSET, OUT_OUTLINE_PRECIS,
                               CLIP_DEFAULT_PRECIS, CLEARTYPE_QUALITY, 
                               VARIABLE_PITCH, L"Arial");
        SendMessage(hDateLabel, WM_SETFONT, (WPARAM)hSmallFont, TRUE);
        break;
        
    case WM_TIMER:
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–∏ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏–∏ —Ç–∞–π–º–µ—Ä–∞
        {
            int days = GetDaysUntilNewYear();
            std::wstring daysText;
            
            if (days == 0) {
                daysText = L"–° –ù–û–í–´–ú –ì–û–î–û–ú! üéÑ";
            } else {
                daysText = std::to_wstring(days) + L" –¥–Ω–µ–π";
            }
            
            SetWindowTextW(hDaysLabel, daysText.c_str());
            SetWindowTextW(hDateLabel, GetCurrentDate().c_str());
        }
        break;
        
    case WM_CTLCOLORSTATIC:
        {
            HDC hdcStatic = (HDC)wParam;
            SetTextColor(hdcStatic, RGB(255, 255, 255));
            SetBkColor(hdcStatic, RGB(25, 25, 112)); // –¢–µ–º–Ω–æ-—Å–∏–Ω–∏–π —Ñ–æ–Ω
            
            static HBRUSH hBrush = CreateSolidBrush(RGB(25, 25, 112));
            return (LRESULT)hBrush;
        }
        break;
        
    case WM_ERASEBKGND:
        {
            RECT rect;
            GetClientRect(hWnd, &rect);
            HBRUSH hBrush = CreateSolidBrush(RGB(25, 25, 112));
            FillRect((HDC)wParam, &rect, hBrush);
            DeleteObject(hBrush);
            return 1;
        }
        break;
        
    case WM_DESTROY:
        KillTimer(hWnd, timerId);
        PostQuitMessage(0);
        break;
        
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ –æ–∫–Ω–∞
ATOM RegisterWindowClass(HINSTANCE hInstance) {
    WNDCLASSEXW wcex;
    
    wcex.cbSize = sizeof(WNDCLASSEX);
    wcex.style = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc = WndProc;
    wcex.cbClsExtra = 0;
    wcex.cbWndExtra = 0;
    wcex.hInstance = hInstance;
    wcex.hIcon = LoadIcon(hInstance, IDI_APPLICATION);
    wcex.hCursor = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground = (HBRUSH)(COLOR_WINDOW + 1);
    wcex.lpszMenuName = NULL;
    wcex.lpszClassName = szWindowClass;
    wcex.hIconSm = LoadIcon(wcex.hInstance, IDI_APPLICATION);
    
    return RegisterClassExW(&wcex);
}

// –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow) {
    hInst = hInstance;
    
    RegisterWindowClass(hInstance);
    
    // –°–æ–∑–¥–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    HWND hWnd = CreateWindowW(szWindowClass, szTitle, 
        WS_OVERLAPPEDWINDOW & ~WS_MAXIMIZEBOX & ~WS_SIZEBOX,
        CW_USEDEFAULT, 0, 320, 180, nullptr, nullptr, hInstance, nullptr);
    
    if (!hWnd) {
        return FALSE;
    }
    
    ShowWindow(hWnd, nCmdShow);
    UpdateWindow(hWnd);
    
    // –¶–∏–∫–ª —Å–æ–æ–±—â–µ–Ω–∏–π
    MSG msg;
    while (GetMessage(&msg, nullptr, 0, 0)) {
        TranslateMessage(&msg);
        DispatchMessage(&msg);
    }
    
    return (int)msg.wParam;
}